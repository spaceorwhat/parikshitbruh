#include "stm32f4xx.h"
int flag=-1;
void TIM4_IRQHandler(void);
int main()
{
  
  //Enable the GPIOD clock
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);  
    
  //GPIOD Configuration  
  GPIO_InitTypeDef GP;
  
  
  GP.GPIO_Mode=GPIO_Mode_OUT;
  GP.GPIO_OType=GPIO_OType_PP;
  GP.GPIO_PuPd=GPIO_PuPd_UP;
  GP.GPIO_Speed=GPIO_Speed_100MHz;
  
  GP.GPIO_Pin=GPIO_Pin_12;
  GPIO_Init(GPIOD,&GP);
  
  GP.GPIO_Pin=GPIO_Pin_13;
  GPIO_Init(GPIOD,&GP);
  
  GP.GPIO_Pin=GPIO_Pin_14;
  GPIO_Init(GPIOD,&GP);
  
  GP.GPIO_Pin=GPIO_Pin_15;
  GPIO_Init(GPIOD,&GP);
  
  //formula-   prescalar(Hz)/clockfequency(hz) * time period(ms) = interrupt time(s)
  //42,000/42,000,000*1000=1 s interrupt
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);//enable clock pulse to timer
  TIM_TimeBaseInitTypeDef timeobject;//making timer object
  timeobject.TIM_Prescaler=41999; //timer will tick every 0.001s and prescalar value is 42000-1
  timeobject.TIM_CounterMode=TIM_CounterMode_Up;
  timeobject.TIM_Period=999;//timer max value is 1000-1
  timeobject.TIM_ClockDivision=TIM_CKD_DIV1;

  TIM_TimeBaseInit(TIM4,&timeobject);//initialize timer configurations
  
  NVIC_InitTypeDef NVICobject;   //NVIC
  NVICobject.NVIC_IRQChannel=TIM4_IRQn;
  //NVICobject.NVIC_IRQChannelPreemptionPriority=0;
  //NVICobject.NVIC_IRQChannelSubPriority=0;
  NVICobject.NVIC_IRQChannelCmd=ENABLE;
  NVIC_Init(&NVICobject);

  TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);

  TIM_Cmd(TIM4,ENABLE); //start time
   
  TIM4_IRQHandler();    
  
  while(1){
   };
  
  return 0;
}
void TIM4_IRQHandler(void)
{
   
  /* Clear TIM4 update interrupt */
  TIM_ClearITPendingBit(TIM4,TIM_IT_Update);
  /*This extra flag compenstes for the internal delay that's making the led5(orange) glow instead of led4(green)*/
 if (flag==-1){
    flag=0;
  }
  
  else if (flag==0){
    if (GPIO_ReadOutputDataBit(GPIOD,GPIO_Pin_15)==Bit_SET)
    GPIO_ToggleBits(GPIOD,GPIO_Pin_15);          
         
     GPIO_ToggleBits(GPIOD,GPIO_Pin_12);
    
     //GPIO_ToggleBits(GPIOD,GPIO_Pin_13);
     flag=1;
     
  }
  else if (flag==1){
    
     GPIO_ToggleBits(GPIOD,GPIO_Pin_12);
    
    
     GPIO_ToggleBits(GPIOD,GPIO_Pin_13);
     flag=2; 
     
  }
  else if (flag==2){
    
    GPIO_ToggleBits(GPIOD,GPIO_Pin_13);
    
     GPIO_ToggleBits(GPIOD,GPIO_Pin_14);
     flag=3;
    
     
  }
  else if (flag==3){
    
   GPIO_ToggleBits(GPIOD,GPIO_Pin_14);
   
     GPIO_ToggleBits(GPIOD,GPIO_Pin_15);
     flag=0; 
     
  }
}
